# This workflow demonstrates building a container image, pushing to an Azure Container Registry and deploying to Kubernetes
# It is split into separate jobs for readability but could be squashed into a single job if that best suits your scenario
name: App Deploy Flask - Docker Build

on:
  push:
    branches:
      - main
    paths:
      # - '.github/workflows/**'
      - '.github/workflows/App-Flask-DockerBuild.yml'
  workflow_dispatch:
    # inputs:
    #   RG:
    #     description: 'The Resource Group where your resources are deployed'
    #     required: true
    #     type: string
    #   AKSNAME:
    #     description: 'The Name of the AKS resource'
    #     required: true
    #     type: string
    #   ACRNAME:
    #     description: 'The Name of the ACR resource'
    #     required: true
    #     type: string
    #   APPNAME:
    #     description: 'The Name of the Application to deploy'
    #     default: "flask"
    #     required: true
    #     type: string
    #   NAMESPACE:
    #     description: 'The Kubernetes Namespace to deploy the Application to'
    #     default: "default"
    #     required: false
    #     type: string
    #   ENVIRONMENT:
    #     description: 'A GitHub Environment to pull action secrets from'
    #     required: true
    #     type: environment
env:
  ACRNAME: "hseungh"
  RG: "seunghyun-rg"
  AKSNAME: "hong-aks"
  APPNAME: "flask"
  NAMESPACE: "flask-namespace"

permissions:
  id-token: write
  contents: read

jobs:
  BuildPush:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Get application code from repo
        uses: actions/checkout@v4

      - name: Job parameter inspection
        run: |
          echo "RG is ${{ env.RG }}"
          echo "AKS name is ${{ env.AKSNAME }}"
          echo "ACR name is ${{ env.ACRNAME }}"

      - name: Azure Login
        uses: Azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Connect to Azure Container Registry (ACR)
        id: acrconnect
        run: |
          echo "Retrieving access token from ${{ env.ACRNAME }}"
          TOKEN=$(az acr login -n ${{ env.ACRNAME }} --expose-token)

          if [ -z "$TOKEN" ]
          then
            echo "ACR Token was not retrieved successfully"
            exit 1
          fi

          ACRTOKEN=$(echo $TOKEN | jq -r ".accessToken")
          LOGINSERVER=$(echo $TOKEN | jq -r ".loginServer")

          echo "ACR Login Server: $LOGINSERVER"
          echo "loginServer=$LOGINSERVER" >> $GITHUB_OUTPUT

          echo "Passing token as stdin to docker login"
          echo $ACRTOKEN | docker login $LOGINSERVER -u 00000000-0000-0000-0000-000000000000 --password-stdin

      - name: Container build and push to a Azure Container Registry (ACR)
        env:
          ACRSERVER: ${{ steps.acrconnect.outputs.loginServer }}
        run: |
          cd "workloads/${{ env.APPNAME }}"
          docker build . -t ${{ env.ACRSERVER }}/${{ env.APPNAME }}:${{ github.sha }}
          docker push ${{ env.ACRSERVER }}/${{ env.APPNAME }}:${{ github.sha }}

  Deploy:
    runs-on: ubuntu-latest
    environment: prod
    needs: [BuildPush]

    steps:
      - name: Get application k8s manifests from repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: Azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      # - name: Kubelogin
      #   env:
      #     kubeloginversion: 'v0.0.11'
      #   run: |
      #     wget https://github.com/Azure/kubelogin/releases/download/${{ env.kubeloginversion }}/kubelogin-linux-amd64.zip
      #     unzip kubelogin-linux-amd64.zip
      #     sudo mv bin/linux_amd64/kubelogin /usr/bin
      #     kubelogin convert-kubeconfig -l azurecli

      - name: Install Kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.24'

      - name: Set the target Azure Kubernetes Service (AKS) cluster.
        uses: azure/aks-set-context@v4
        with:
          cluster-name: ${{ env.AKSNAME }}
          resource-group: ${{ env.RG }}
          use-kubelogin: 'true'

      - name: Create the namespace if it does not exist
        if: ${{ env.NAMESPACE != 'default' }}
        run: |
          cmdOut=$(kubectl get namespaces ${{ env.NAMESPACE }} -o json | jq -r '.status.phase')
          if [ "$cmdOut" != 'Active' ]; then kubectl create namespace ${{ env.NAMESPACE }}; fi

      - name: Deploy app to AKS
        uses: azure/k8s-deploy@v5
        with:
          action: deploy
          manifests: |
            workloads/flask/deployment.yaml
            workloads/flask/ingress.yaml
          images: |
            ${{ env.ACRNAME }}.azurecr.io/${{ env.APPNAME }}:${{ github.sha }}
          namespace: ${{ env.NAMESPACE }}